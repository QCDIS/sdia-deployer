version: '3'
services:

#  mysql:
#    image: mysql:5.7
#    environment:
#      MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
#      MYSQL_DATABASE: semaphore
#      MYSQL_USER: semaphore
#      MYSQL_PASSWORD: semaphore
#    ports:
#      - "3306:3306"
#
#  semaphore:
#    image: qcdis/docker_ansible_semaphore:v2.5.1-2.9.9
#    environment:
#      SEMAPHORE_DB_USER: semaphore
#      SEMAPHORE_DB_PASS: semaphore
#      SEMAPHORE_DB_HOST: mysql
#      SEMAPHORE_DB_PORT: 3306
#      SEMAPHORE_DB: semaphore
#      SEMAPHORE_PLAYBOOK_PATH: /etc/semaphore
#      SEMAPHORE_ADMIN_PASSWORD: password
#      SEMAPHORE_ADMIN_NAME: "Developer"
#      SEMAPHORE_ADMIN_EMAIL: admin@localhost
#      SEMAPHORE_ADMIN: admin
#      SEMAPHORE_WEB_ROOT: http://0.0.0.0:3000
#    ports:
#      - "3000:3000"
#    depends_on:
#      - mysql
#
#  sure-tosca:
#    image: qcdis/sure-tosca
#    ports:
#      - "8081:8081"


#  compute:
#    image: ubuntu:18.04
#    volumes:
#      - "./run_test_nodes.sh:/tmp/run_test_nodes.sh"
#      - "./id_rsa.pub:/tmp/id_rsa.pub"
#      - "/var/run/docker.sock:/var/run/docker.sock"
#    command: "/tmp/run_test_nodes.sh"
#
#
#  compute_1:
#    image: ubuntu:18.04
#    volumes:
#      - "./run_test_nodes.sh:/tmp/run_test_nodes.sh"
#      - "./id_rsa.pub:/tmp/id_rsa.pub"
#      - "/var/run/docker.sock:/var/run/docker.sock"
#    command: "/tmp/run_test_nodes.sh"
#
  web:
    image: ansible/awx:15.0.1
    container_name: awx_web
    depends_on:
      - redis
      - postgres
    ports:
      - "8052:8052"
    hostname: awxweb
    user: root
    restart: unless-stopped
    volumes:
      - "./SECRET_KEY:/etc/tower/SECRET_KEY"
      - "./environment.sh:/etc/tower/conf.d/environment.sh"
      - "./credentials.py:/etc/tower/conf.d/credentials.py"
      - "./awx_nginx.conf:/etc/nginx/nginx.conf:ro"
      - ./settings.py:/etc/tower/settings.py

  awx-task:
    image: ansible/awx:15.0.1
    container_name: awx-task
    depends_on:
      - redis
      - web
      - postgres
    command: /usr/bin/launch_awx_task.sh
    hostname: awx-task
    user: root
    restart: unless-stopped
    volumes:
      - "./SECRET_KEY:/etc/tower/SECRET_KEY"
      - "./environment.sh:/etc/tower/conf.d/environment.sh"
      - "./credentials.py:/etc/tower/conf.d/credentials.py"
      - ./settings.py:/etc/tower/settings.py
    environment:
      SUPERVISOR_WEB_CONFIG_PATH: '/etc/supervisord.conf'

  redis:
    image: redis
    container_name: awx_redis
    restart: unless-stopped
    command: ["/usr/local/etc/redis/redis.conf"]
    volumes:
      - "./redis.conf:/usr/local/etc/redis/redis.conf:ro"


  postgres:
    image: postgres:10
    container_name: awx_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: awx
      POSTGRES_PASSWORD: awxpass
      POSTGRES_DB: awx